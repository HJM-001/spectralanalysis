#ifndef _VEC3D_
#define _VEC3D_

#include<iostream>
//#include"HBASE"
#include<cmath>
#include"geometry"
using namespace std;

/*
	注意：最基本的才列入，与项目相关的不列入
*/

class  Vec3d
{
	REAL x,y,z;   
public:
	Vec3d(){x=0.0;y=0.0;z=0.0;}
	Vec3d(REAL a, REAL b,REAL c){x=a;y=b;z=c;}
	Vec3d(REAL *p):x(p[0]),y(p[1]),z(p[2]){}
	void init(Vec3d& p){x=p.x; y=p.y; z=p.z;}
	void init(REAL a, REAL b,REAL c){x=a;y=b;z=c;}

	REAL X(){return x;}
	REAL Y(){return y;}
	REAL Z(){return z;}
	
	void setx(REAL a){x=a;}
	void sety(REAL a){y=a;}
	void setz(REAL a){z=a;}

	void out(){std::cout<<"("<<x<<","<<y<<","<<z<<")"<<std::endl;}
	REAL* data(){return (REAL*)this;} //有了这个指针，可以把Vec3d当作数组一样使用
	REAL& operator [](int i){return data()[i];} //有了这个，可以不要前面的6个函数，但这样做不安全
	Vec3d operator + (const Vec3d& b)	{ return Vec3d(x+b.x,y+b.y,z+b.z);	}
	Vec3d operator * (const REAL a){return Vec3d(x*a,y*a,z*a);}//点与数乘，点一定要在前
	Vec3d operator - (const Vec3d& b)	{ return Vec3d(x-b.x,y-b.y,z-b.z);	}
	Vec3d operator ^ (const Vec3d& p) {return Vec3d(y*p.z-z*p.y,z*p.x-x*p.z,x*p.y-y*p.x);}//叉积
	REAL operator * (const Vec3d& p){return x*p.x+y*p.y+z*p.z;}//两点的内积
	bool operator == (const Vec3d& a){return ((a.x-x)*(a.x-x)+(a.y-y)*(a.y-y)+(a.z-z)*(a.z-z)<MyEPS);}
	operator REAL*(){return (REAL*)this;} //指针转换操作符函数没有返回值。当(REAL*)vec3d时，本函数被调用，括号不可少
	REAL theta(){return (y<0)?(2*PI-acos(x/sqrt(x*x+y*y))):(acos(x/sqrt(x*x+y*y)));}//球面坐标的经度角[0,2*PI)
	REAL phi(){return acos(z/sqrt(x*x+y*y+z*z));}//球面坐标的纬度角[0,PI]
	REAL norm(){return sqrt(x*x+y*y+z*z);}

	bool parallel(Vec3d& b)
	{
		Vec3d O(0,0,0);
		Vec3d I=(*this);

		if( (I==O) && (b==O) )return true;//// 认为两个0向量平行
		if( (I==O) && (!(b==O)) )return false;
		if( (!(I==O)) && (b==O) )return false;
		Vec3d A=I^b; 
		if( !(A==O) )return false;	//不共线,当然不同向		
		return true;
		
	}
	bool codirwith(Vec3d& b)	 
	{		
		if( parallel(b)==false )return false;
		
		Vec3d I=(*this);

		I=I*(1/GEO::vec_length(I));
		Vec3d B=b*(1/GEO::vec_length(b));
		REAL AA=I*B;
		
		if( MyEQ(AA,1)) return true; //夹角为0
		
		return 	false ;
	}

	friend Vec3d operator*(REAL a,Vec3d& b){return Vec3d(a*b.x,a*b.y,a*b.z);}    //点在后也可
	friend ostream& operator<<(ostream& o, const Vec3d& v){return o<<"("<<v.x<<","<<v.y<<","<<v.z<<")";}

};
#endif

